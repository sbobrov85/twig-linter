/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.sbobrov85.nb.twiglinter.panel;

import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.PreferenceChangeListener;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.NbPreferences;
import ru.sbobrov85.nb.twiglinter.classes.CommonHelper;
import ru.sbobrov85.nb.twiglinter.classes.TwigLinter;

final class TwigLinterPanel extends javax.swing.JPanel {

    private final TwigLinterOptionsPanelController controller;

    /**
     * Contain preferences instance for current panel options.
     */
    private Preferences prefs;

    /**
     * Class constructor.
     *
     * @param controller current controller instance.
     */
    TwigLinterPanel(final TwigLinterOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()

        prefs = NbPreferences.forModule(TwigLinter.class);

        prefs.addPreferenceChangeListener(new PreferenceChangeListener() {
            @Override
            public void preferenceChange(final PreferenceChangeEvent evt) {
                controller.changed();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        browseButton = new javax.swing.JButton();
        executablePathLabel = new javax.swing.JLabel();
        filePath = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jMenuItem1, org.openide.util.NbBundle.getMessage(TwigLinterPanel.class, "TwigLinterPanel.jMenuItem1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(TwigLinterPanel.class, "TwigLinterPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(executablePathLabel, org.openide.util.NbBundle.getMessage(TwigLinterPanel.class, "TwigLinterPanel.executablePathLabel.text")); // NOI18N

        filePath.setText(org.openide.util.NbBundle.getMessage(TwigLinterPanel.class, "TwigLinterPanel.filePath.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(executablePathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseButton)
                .addGap(119, 119, 119))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(executablePathLabel)
                    .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addContainerGap(309, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String executablePath = filePath.getText();

        final JFileChooser fileChooser = new JFileChooser(executablePath);
        fileChooser.setFileFilter(
            new FileNameExtensionFilter("PHP Executable", "phar")
        );

        int returnVal = fileChooser.showOpenDialog(this);

        if (JFileChooser.APPROVE_OPTION == returnVal) {
            File pharFile = fileChooser.getSelectedFile();
            if (pharFile.exists() && pharFile.isFile()) {
                filePath.setText(pharFile.getPath());
            } else {
                Logger logger = Logger.getLogger(getClass().getName());
                logger.log(Level.INFO, "Invalid file selected!");
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    /**
     * Read settings and initialize GUI.
     */
    void load() {
        filePath.setText(prefs.get(CommonHelper.OPTION_EXECUTABLE_PATH, ""));
    }

    /**
     * Store modified settings.
     */
    void store() {
        prefs.put(CommonHelper.OPTION_EXECUTABLE_PATH, filePath.getText());
    }

    /**
     * Check whether form is consistent and complete.
     *
     * @return true if all is ok, false otherwise.
     */
    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel executablePathLabel;
    private javax.swing.JTextField filePath;
    private javax.swing.JMenuItem jMenuItem1;
    // End of variables declaration//GEN-END:variables
}
